class Solution(object):
    def sortJumbled(self, mapping: list, nums: list):
        """
        :type mapping: List[int]
        :type nums: List[int]
        :rtype: List[int]
        """
        def convert(num):
            if num == 0:
                return mapping[0]

            nv = 0
            digs = 1

            while num:
                nv += mapping[num % 10] * digs
                num = num // 10
                digs *= 10
            return nv

        return sorted(nums, key=lambda n: convert(n))

    def incompleteSolution(self, mapping: list, nums: list):
        """This solution does not work for duplicate values"""
        ret = {}

        for n in nums:
            nv = 0
            nk = n
            digs = 0
            if n == 0:
                ret[nk] = mapping[0]
                continue

            while n:
                nv += mapping[n % 10] * (10 ** digs)
                n = n // 10
                digs += 1
            ret[nk] = nv
        return [kv[0] for kv in sorted(ret.items(), key=lambda kv: kv[1])]


if __name__ == "__main__":
    sol = Solution()
    tests = [([8, 9, 4, 0, 2, 1, 3, 5, 7, 6], [991, 338, 38]),
             ([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [789, 456, 123]),
             ([9, 8, 7, 6, 5, 4, 3, 2, 1, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])]
    for te in tests:
        res = sol.sortJumbled(*te)
        print(f"{te}: --> {res}")
